name: Release Client Binaries
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true

jobs:
  envVars:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Env files
        run: |
          cp env.py.template env.py
          file_path="env.py"

          # Replace HOST_ADDR with GitHub secret
          sed -i "s/HOST_ADDR = \"[^\"]*\"/HOST_ADDR = \"$HOST_ADDR_SECRET\"/g" "$file_path"

          # Replace PORT_NO with GitHub secret
          sed -i "s/PORT_NO = [0-9]\+/PORT_NO = $PORT_NO_SECRET/g" "$file_path"

        env:
          HOST_ADDR_SECRET: ${{ secrets.HOST_ADDR_SECRET }}
          PORT_NO_SECRET: ${{ secrets.PORT_NO_SECRET }}
        working-directory: ${{ github.workspace }}/client/src
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: env
          path: ${{ github.workspace }}/client/src/env.py

  build:
    needs: envVars
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11
          cache: pip

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: ./client/src/web-src/package-lock.json

      - name: Cache downloaded Task executable
        uses: actions/cache@v3
        env:
          cache-name: cache-task
        with:
          path: |
            task
          key: ${{ runner.os }}-task-${{ hashFiles('**/task') }}
          restore-keys: |
            ${{ runner.os }}-task-

      - name: Download Task executable for ${{ matrix.os }}
        run: |
          if [ ! -f "task/task*" ]; then
            echo "Download Taskfile for ${{ matrix.os }}"
            mkdir task
            if  [ "$RUNNER_OS" == "Windows" ]; then
              curl -L -o taskfile.zip https://github.com/go-task/task/releases/download/v3.31.0/task_windows_amd64.zip
              unzip -q taskfile.zip -d task
            elif [ "$RUNNER_OS" == "Linux" ]; then
              curl -L -o taskfile.tar.gz https://github.com/go-task/task/releases/download/v3.31.0/task_linux_amd64.tar.gz
              tar -xvf taskfile.tar.gz -C task
              chmod -R +x task
            elif [ "$RUNNER_OS" == "macOS" ]; then
              curl -L -o taskfile.tar.gz  https://github.com/go-task/task/releases/download/v3.31.0/task_darwin_amd64.tar.gz
              tar -xvf taskfile.tar.gz -C task

            else
              echo "Unknown OS"
              exit 1
            fi
          ls -la
          else
            echo "Using cached Task executable"
          fi
          ls -la task
        shell: bash

      - name: Add task to path
        run: |
          if  [ "$RUNNER_OS" == "Windows" ]; then
            mv task/* /usr/bin/
          else
            chmod -R +x task
            sudo mv task/* /usr/local/bin/
          fi
        shell: bash

      - name: Check Taskfile
        run: |
          ls -la
          task --version
          task help
        working-directory: ${{ github.workspace }}/client
        shell: bash

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: env
          path: ${{ github.workspace }}/client/src

      - name: Install Dependencies
        run: task install
        working-directory: ${{ github.workspace }}/client

      - name: Build App
        run: task build
        working-directory: ${{ github.workspace }}/client

      - name: Create Binaries
        run: task binaries
        working-directory: ${{ github.workspace }}/client

      - name: Rename binary for ${{ matrix.os }}
        run: |
          if  [ "$RUNNER_OS" == "Windows" ]; then
            echo "Rename binary for Windows"
            mv ./dist/TCPChat.exe ./dist/TCPChat-windows-amd64.exe
          elif [ "$RUNNER_OS" == "Linux" ]; then
            echo "Rename binary for Linux"
            mv ./dist/TCPChat ./dist/TCPChat-linux-amd64
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "Rename binary for macOS"
            mv ./dist/TCPChat ./dist/TCPChat-darwin-amd64
          else
            echo "Unknown OS"
            exit 1
          fi
        shell: bash
        working-directory: ${{ github.workspace }}/client

      - name: Upload Binaries
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: ./client/dist

  release:
    needs: build
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: binaries
          path: ./dist

      - name: Check files
        run: |
          ls -la
          ls -la ./dist

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/*
          name: ${{ github.ref }}
